

#include "MeOrion.h"
#include <Wire.h>
#include <PinChangeInt.h>
#include <PID_v1.h>
#include <Servo.h>

int valor=0;

#define kp 0.15
#define ki 0.0
#define kd 0.0

// I2C
MeEncoderMotor motor1(0x09, SLOT1);   //  Motor at slot1
MeEncoderMotor motor2(0x09, SLOT2);   //  motor at slot2
Servo myservo;

double posactual =0, salida=0, posnext =0;
PID myPID(&posactual, &salida, &posnext, kp, ki, kd, DIRECT);

void setup(){
  myPID.SetMode(AUTOMATIC);
  myPID.SetSampleTime(1); /*Establece la diferencia de tiempos para los que se obtiene la nueva salida*/
  myPID.SetOutputLimits(-185, 185); /*Límites de la salida (Las señales PWD están limitadas entre este intervalo)*/
  //contador = 0;  
  motor1.begin();
  motor2.begin();
  motor1.reset();
  motor2.reset();
  myservo.attach(9);
  pinMode(7, INPUT); //Para los fines de carrera
  pinMode(8, INPUT);

  Serial.begin(9600);
  attachInterrupt(digitalPinToInterrupt(7), detenermotor1(), RISING);
  attachInterrupt(digitalPinToInterrupt(8), detenermotor2(), RISING);
}


void loop(){
  
  String nada;
  String comando;
  String angulo;
  int i=0;
  Serial.print("Salida1:");Serial.println(salida);
  
  if(Serial.available()){//solo leeremos si hay un byte en el buffer
    
    //comando=Serial.read();//leemos el byte
    nada  = Serial.readStringUntil('#');
    comando  = Serial.readStringUntil('#');
    angulo  = Serial.readStringUntil('#');

    switch(comando){
    case 1:
      posnext=(angulo.toDouble());//Posición a donde se quiere mover el motor enviado por matlab
      Serial.print("Posnext:");Serial.println(posnext);
      
      while (i<10){
        
        posnext=(angulo.toDouble());//Posición a donde se quiere mover el motor enviado por matlab
        Serial.print("Posnext:");Serial.println(posnext);
        double posactual = motor1.getCurrentPosition();posactual = motor1.getCurrentPosition();//Posición actual del motor
        Serial.print("Posactual:");Serial.println(posactual);
        //Serial.print("Posactual Double:");Serial.println(posactual);
        double  posnext;
        delay(2000);
        myPID.Compute();myPID.Compute(); //Genera la acción de control
        //motor1.reset();
        delay(2000);
        Serial.print("Salida:");Serial.println(salida);
        motor1.runSpeed(salida);   
        //salida=0;    
        delay(2000);
        Serial.print("Diferencia de pos:");Serial.println(abs(posnext-posactual));        
        i++;
        Serial.print("i:");Serial.println(i);
      }
      break;
      
    case 2:
      valor=(angulo.toInt());//decrementamos 10
      motor2.moveTo(valor, 200);
      delay(2000);
      
       motor2.moveTo(0, 100);
       delay(2000);
       break;
       
    case 3:          //Para mover el servo (aquí ángulo es la posición que se quiere bajar en mm).
      valor = angulo.toInt() * 180.0 / 3.1416 / 32.0;   //El servo puede mover de 0 a 180º
      myservo.write(valor);
      break;
      
    case 4:          //Resetear el robot
      motor1.runSpeed(-10);
      motor2.runSpeed(-10);
      while(digitalRead(7)==FALSE){};  //espera a que se active el final de carrera
      motor1.runSpeed(0);
      motor2.runSpeed(0);
      motor1.reset();
      
      motor1.runSpeed(10);
      motor2.runSpeed(10);
      while(digitalRead(8)==FALSE){};  //espera a que se active el final de carrera
      motor1.runSpeed(0);
      motor2.runSpeed(0);
      motor2.reset();
      break;
  }

  delay(10);
}//End loop


void detenermotor1(){
  motor1.runSpeed(0);
  motor1.reset();
}

void detenermotor2(){
  motor2.runSpeed(0);
  motor2.reset();
}


